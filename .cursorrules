# Manuscript Ballast - Cursor Rules & Subagents

## Project Context

This is a manuscript editing application with AI-powered suggestions, built with React + TipTap + Supabase.
The codebase has significant complexity around TipTap Pro integration, queue-based document processing, and ProseMirror plugins.

## General Rules

1. **Use pnpm exclusively** - Never npm or yarn
2. **Server runs on port 8080** - Default Vite port
3. **No manual edits to src/components/ui/** - These are shadcn/ui managed components
4. **Always use available MCPs** - Supabase MCP for database operations
5. **Component organization**: Place in app directory /components and combine by usecase in subdirectories
6. **Always use /components/ui** to build new components
7. **Fetch logs from console** for debugging
8. **Point out performance improvements and security issues** proactively
9. **Don't install packages unless asked** - The stack is stable
10. **Prefer iteration and modularization over code duplication**

## Documentation Structure

- **Root CLAUDE.md** - Navigation hub and quick reference
- **docs/** - Organized by: architecture, features, guides, api, product
- **src/components/workspace/CLAUDE.md** - Workspace component details
- **src/lib/CLAUDE.md** - Core utilities and business logic
- **supabase/functions/CLAUDE.md** - Edge function documentation

## Custom Slash Commands

### /tiptap - TipTap Integration Specialist

**When to use**: TipTap editor issues, JWT authentication, AI suggestions, large documents

**Expertise**:
- TipTap v3 editor configuration and extensions
- ProseMirror plugin development
- JWT authentication with TipTap Pro API
- AI Suggestion extension usage
- Large document chunking and caching
- Decoration management
- Editor command chains

**Context to load**:
1. Read: docs/guides/TIPTAP_JWT_GUIDE.md
2. Read: docs/guides/EXPERIMENTAL_AI_SETUP.md
3. Read: src/hooks/useTiptapEditor.ts
4. Read: src/components/workspace/Editor.tsx
5. Search: "TipTap" in codebase

**Common tasks**:
- Debug "401 Unauthorized" errors ‚Üí Check JWT token and Allowed Origins
- Fix suggestion positioning issues ‚Üí Use ProseMirror positions, not character offsets
- Optimize large document processing ‚Üí Adjust chunkSize, enableCache settings
- Add new editor extensions ‚Üí Configure in useTiptapEditor.ts
- Debug decoration rendering ‚Üí Check suggestionsPlugin.ts and checksPlugin.ts

**Critical reminders**:
- ‚ùå DO NOT create custom resolvers for chunking (use native chunkSize)
- ‚ùå DO NOT use character offsets (use ProseMirror positions)
- ‚ùå DO NOT expose secrets to client-side (use JWT tokens only)
- ‚úÖ Always use editor.chain() for multiple commands
- ‚úÖ TipTap native features first before custom solutions

---

### /queue - Queue System Specialist

**When to use**: Document processing, DOCX uploads, stuck jobs, background processing

**Expertise**:
- Queue-based document processing architecture
- Supabase edge function development (queue-processor)
- DOCX file processing with Mammoth.js
- Progress tracking and status updates
- CPU timeout protection
- Automatic retry logic
- Stuck job detection and recovery

**Context to load**:
1. Read: docs/architecture/QUEUE_SYSTEM_ARCHITECTURE.md
2. Read: supabase/functions/queue-processor/index.ts
3. Read: src/hooks/useQueueProcessor.ts
4. Read: src/services/manuscriptService.ts
5. Query: SELECT * FROM processing_queue via Supabase MCP

**Common tasks**:
- Debug stuck processing jobs ‚Üí Check processing_queue table status
- Fix timeout errors ‚Üí Review CPU timeout protection logic
- Add new job types ‚Üí Extend queue-processor function
- Improve processing speed ‚Üí Optimize Mammoth.js settings
- Add progress indicators ‚Üí Update progress_data field

**Critical reminders**:
- ‚úÖ Queue system handles 60K+ word documents reliably
- ‚úÖ CPU timeout protection at 1.8s prevents edge function timeout
- ‚úÖ Auto-retry up to 3 attempts per job
- ‚ùå Never bypass queue for large documents
- ‚ùå Don't use direct edge function calls for processing

---

### /supabase - Supabase & Database Specialist

**When to use**: Database schema, edge functions, storage, RLS policies, authentication

**Expertise**:
- PostgreSQL database design and queries
- Row Level Security (RLS) policies
- Supabase edge functions (Deno-based)
- Supabase Storage for file management
- Authentication and user management
- Real-time subscriptions (future)

**Context to load**:
1. List tables via Supabase MCP
2. Read: supabase/functions/CLAUDE.md
3. Read: docs/api/README.md (Supabase section)
4. List migrations: supabase/migrations/
5. Use Supabase MCP tools for database operations

**Common tasks**:
- Create database migrations ‚Üí supabase migration new <name>
- Fix RLS policy issues ‚Üí Check policy definitions, user permissions
- Deploy edge functions ‚Üí supabase functions deploy <name>
- Debug edge function errors ‚Üí supabase functions logs <name>
- Query processing queue ‚Üí Use Supabase MCP execute_sql

**Critical reminders**:
- ‚úÖ Always use RLS policies for data access control
- ‚úÖ Service role key only in edge functions (never client-side)
- ‚úÖ Edge functions have 2-minute timeout limit
- ‚ùå Never commit secrets to git
- ‚ùå Don't use SELECT * (select only needed columns)

---

### /architecture - System Architecture Specialist

**When to use**: System design questions, data flow, component relationships, adding major features

**Expertise**:
- Overall system architecture and design patterns
- Component hierarchy and relationships
- Data flow between frontend and backend
- State management patterns
- Integration patterns (TipTap, Supabase, OpenAI)
- Performance optimization strategies
- Scalability considerations

**Context to load**:
1. Read: docs/architecture/README.md
2. Read: docs/features/README.md
3. Read: CLAUDE.md (root)
4. Read: src/components/workspace/CLAUDE.md
5. Read: src/lib/CLAUDE.md

**Common tasks**:
- Plan new major features ‚Üí Review architecture docs, plan integration points
- Refactor large components ‚Üí Identify boundaries, extract utilities
- Optimize performance ‚Üí Review data flow, identify bottlenecks
- Debug complex issues ‚Üí Trace data flow from UI to database
- Understand editor architecture ‚Üí Editor (primary) vs ManuscriptWorkspace (legacy)

**Critical reminders**:
- ‚úÖ Editor is the primary production editor (TipTap Pro AI)
- ‚úÖ ManuscriptWorkspace is deprecated (OpenAI legacy, backward compatibility only)
- ‚úÖ Queue system eliminates WORKER_LIMIT errors
- ‚úÖ JWT authentication for TipTap is complex (check guide)
- ‚ùå Don't duplicate logic between editors (share utilities)

---

### /suggestions - Suggestion System Specialist

**When to use**: AI suggestion mapping, position calculations, decoration rendering, suggestion UI

**Expertise**:
- Suggestion mapping (server ‚Üí UI format)
- ProseMirror position calculations
- Suggestion decoration rendering
- ChangeList and ChangeCard components
- Suggestion acceptance/rejection workflow
- Position drift debugging
- Overlapping suggestion handling

**Context to load**:
1. Read: src/lib/suggestionMapper.ts
2. Read: src/lib/suggestionsPlugin.ts
3. Read: src/lib/types.ts
4. Read: src/components/workspace/ChangeList.tsx
5. Read: src/components/workspace/ChangeCard.tsx

**Common tasks**:
- Fix position mapping issues ‚Üí Check ProseMirror position calculations
- Debug suggestion not appearing ‚Üí Verify decoration creation
- Handle overlapping suggestions ‚Üí Adjust decoration ranges
- Optimize suggestion rendering ‚Üí Cap decoration count, use React.memo
- Add new suggestion types ‚Üí Update types.ts, suggestionMapper.ts

**Critical reminders**:
- ‚úÖ Use ProseMirror positions, never character offsets
- ‚úÖ Map AI suggestions to UISuggestion format
- ‚úÖ Handle document mutations (positions shift after edits)
- ‚ùå Don't manipulate DOM directly (use decorations)
- ‚ùå Don't store large strings in state unnecessarily

---

### /product - Product & Planning Specialist

**When to use**: Feature planning, roadmap, user feedback, PRD, competitive analysis

**Expertise**:
- Product vision and strategy
- User personas and journeys
- Feature prioritization
- Competitive analysis
- Go-to-market strategy
- Success metrics
- Roadmap planning

**Context to load**:
1. Read: docs/product/README.md
2. Read: docs/product/Future_Cleanup_Checklist.md
3. Read: docs/features/README.md
4. Read: README.md

**Common tasks**:
- Plan new features ‚Üí Review product docs, assess user value vs. effort
- Prioritize technical debt ‚Üí Check Future_Cleanup_Checklist.md
- Understand user needs ‚Üí Review personas and pain points
- Analyze competitors ‚Üí Reference competitive analysis section
- Plan releases ‚Üí Review roadmap and priorities

**Critical reminders**:
- ‚úÖ Target users: Fiction authors, non-fiction authors, editors
- ‚úÖ Core value: Professional editing at 1/10th cost
- ‚úÖ Current priorities: Resolve JWT, deprecate standard editor, add export
- üî¥ Known issue: TipTap JWT server-generated tokens rejected
- üü¢ Success: Queue system handles 60K+ words reliably

---

### /debug - Debugging Specialist

**When to use**: Complex bugs, error tracing, console logs, performance profiling

**Expertise**:
- Browser DevTools (console, network, performance)
- Error tracing and stack analysis
- Console log interpretation
- Performance profiling
- Memory leak detection
- Network request debugging
- Supabase edge function logs

**Context to load**:
1. Ask user for console errors/logs
2. Use Supabase MCP get_logs for edge function logs
3. Read: docs/guides/README.md (troubleshooting sections)
4. Search: Error message in codebase

**Common tasks**:
- Trace 401 errors ‚Üí Check network tab, JWT token, TipTap dashboard
- Debug stuck processing ‚Üí Check processing_queue table, edge function logs
- Fix memory leaks ‚Üí Profile memory, check decoration cleanup
- Optimize performance ‚Üí Profile rendering, identify bottlenecks
- Resolve type errors ‚Üí Check type definitions in src/lib/types.ts

**Critical reminders**:
- ‚úÖ Always check browser console first
- ‚úÖ Use Supabase MCP get_logs for edge function errors
- ‚úÖ Network tab shows API call failures
- ‚úÖ Performance tab identifies slow operations
- ‚ùå Don't guess - gather logs and evidence first

---

## Subagent Invocation Examples

```
User: "AI suggestions aren't showing up after clicking Run AI Pass"
‚Üí Invoke: /tiptap - Specialist in TipTap AI and suggestion rendering
‚Üí Check: JWT token, TipTap dashboard, browser console, decoration plugin

User: "DOCX processing is stuck at 'extracting_text'"
‚Üí Invoke: /queue - Specialist in queue system and document processing
‚Üí Check: processing_queue table, edge function logs, CPU timeout

User: "Need to add version history feature"
‚Üí Invoke: /architecture - System design specialist
‚Üí Plan: Data model, UI components, integration points, migration strategy

User: "Suggestions positions are wrong after editing"
‚Üí Invoke: /suggestions - Suggestion mapping specialist
‚Üí Debug: Position calculations, document mutations, decoration updates

User: "RLS policy violation when querying manuscripts"
‚Üí Invoke: /supabase - Database and RLS specialist
‚Üí Check: RLS policies, user authentication, row ownership
```

## MCP Integration

### Supabase MCP Tools Available
- `list_tables` - List all database tables
- `execute_sql` - Run SQL queries
- `apply_migration` - Create database migrations
- `get_logs` - Fetch edge function logs
- `list_edge_functions` - List deployed functions
- `deploy_edge_function` - Deploy functions
- `generate_typescript_types` - Generate DB types

### Context7 MCP (External Documentation)
- Use for TipTap Pro documentation
- Use for React/TypeScript best practices
- Use for Supabase feature documentation

## Code Quality Standards

### TypeScript
- Explicit types for function parameters and returns
- Avoid `any` - use `unknown` if type unknown
- Prefer interfaces for objects, types for unions
- Use discriminated unions for complex types

### React
- Functional components with hooks only
- Extract complex logic to custom hooks
- Keep components under 300 lines
- Use React.memo() for expensive renders

### TipTap/ProseMirror
- Never manipulate DOM directly
- Use decorations for highlights
- Use editor.chain() for multiple commands
- ProseMirror positions, not character offsets

### Supabase
- Always use RLS policies
- Edge functions for CPU-intensive work
- Keep functions under 2-minute timeout
- Use queue for long-running tasks

## Performance Best Practices

- Cap visible decorations (max 200)
- Debounce validation functions (500ms)
- Use React.memo() for list items
- Virtualize long lists (future)
- Clear large objects from memory
- Profile before optimizing

## Security Best Practices

- Never commit secrets to git
- Client-side: Only public keys and JWT tokens
- Server-side: Secrets in Supabase env vars
- Always validate user input
- Use RLS for data access control
- Service role key only in edge functions

## Common Error Patterns

### TipTap 401 Unauthorized
‚Üí Invoke /tiptap
‚Üí Check: JWT token format, Allowed Origins in TipTap dashboard, token expiration

### WORKER_LIMIT exceeded
‚Üí Invoke /queue
‚Üí Check: Using queue system (not direct calls), CPU timeout protection

### Position mapping incorrect
‚Üí Invoke /suggestions
‚Üí Check: Using ProseMirror positions, handling document mutations

### RLS policy violation
‚Üí Invoke /supabase
‚Üí Check: User authentication, row ownership, policy definitions

## Development Workflow

1. **Read documentation first** - Check relevant CLAUDE.md or docs/
2. **Invoke appropriate subagent** - Use slash commands for specialized help
3. **Use MCP tools** - Leverage Supabase MCP for database operations
4. **Check existing patterns** - Search codebase for similar implementations
5. **Test incrementally** - Manual testing checklist in docs/guides/
6. **Update documentation** - Keep CLAUDE.md files current

## Priority Reminders

### Current Priorities (Q4 2025)
1. üî¥ Resolve TipTap JWT issue (server tokens rejected)
2. üü° Deprecate Standard Editor (migrate to Experimental)
3. üìã Add DOCX export functionality
4. üìã Implement suggestion pagination

### Known Complexity Areas
1. TipTap Pro JWT authentication (RESOLVED - 24hr expiration)
2. Large document processing (RESOLVED - Phase 1 parallel batch processing)
3. Editor architecture (SIMPLIFIED - Editor is primary, ManuscriptWorkspace deprecated)

### Technical Debt
- See: docs/product/Future_Cleanup_Checklist.md
- Priority items marked with checkboxes
- Update as items completed

---

**Last Updated**: October 5, 2025
**Version**: 1.0.0
